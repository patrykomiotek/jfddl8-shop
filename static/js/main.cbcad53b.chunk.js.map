{"version":3,"sources":["products/reducers.js","basket/reducer.js","store.js","products/constants.js","basket/constants.js","products/components/Product.js","products/containers/ProductsList.js","products/actions.js","basket/actions.js","basket/components/Basket.js","basket/containers/BasketContainer.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","products","product","basket","id","name","description","price","rootReducer","combineReducers","state","action","type","payload","quantity","newProducts","productIndex","findIndex","element","concat","modifiedProduct","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Product","props","data","onClick","addHandler","ProductsList","this","fetchProducts","Fragment","myProducts","map","index","key","addProduct","Component","connect","ownProps","isUser","dispatch","Basket","style","border","BasketContainer","React","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbcad53b.chunk.js","sourcesContent":["import { PRODUCTS_FETCH } from './constants'\n\nconst INITIAL_STATE = {\n  products: [],\n  product: {},\n  basket: {}\n}\n\nconst products = [\n  { id: 1, name: \"One\", description: 'Super produkt', price: 123 },\n  { id: 2, name: \"Two\", description: 'Super produkt2', price: 332 },\n  { id: 3, name: \"Three\", description: 'Super produkt3', price: 321 }\n]\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case PRODUCTS_FETCH:\n      return {\n        ...state,\n        products: products,\n      }\n    default:\n      return state\n  }\n}\n","import { BASKET_ADD_PRODUCT } from './constants'\n\nconst INITIAL_STATE = {\n  products: [] // {name, quantity, price}\n}\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case BASKET_ADD_PRODUCT:\n      const product = {\n        id: action.payload.id,\n        name: action.payload.name,\n        quantity: 1,\n        price: action.payload.price\n      }\n      const newProducts = [...state.products];\n      const productIndex = newProducts.findIndex((element) => element.id === product.id)\n\n      if (productIndex === -1) {\n        return {\n          ...state,\n          products: state.products.concat(product)\n        }\n      } else {\n        const modifiedProduct = newProducts[productIndex]\n        newProducts[productIndex] = {...modifiedProduct, quantity: modifiedProduct.quantity + 1}\n        return {\n          ...state,\n          products: newProducts\n        }\n      }\n\n    default:\n      return state\n  }\n}\n","import { createStore, combineReducers } from 'redux'\n\nimport products from './products/reducers'\nimport basket from './basket/reducer'\n// import users from './users/reducers'\n// import comments from './comments/reducers'\n\nconst rootReducer = combineReducers({\n  products: products,\n  basket\n  // users: combineReducers({\n  //   auth: ,\n  //   profile:\n  // }),\n  // comments\n})\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport default store;\n","export const PRODUCTS_FETCH = 'PRODUCTS/FETCH'\n","export const BASKET_ADD_PRODUCT = 'BASKET/ADD_PRODUCT'\n","import React from 'react'\n\nconst Product = props => (\n  <div>\n    <p>{props.data.name}</p>\n    <p>{props.data.description}</p>\n    <p>{props.data.price}</p>\n    <p><button onClick={() => props.addHandler(props.data)}>add to Cart</button></p>\n  </div>\n)\n\nexport default Product\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport Product from '../components/Product'\nimport { fetchProducts } from '../actions'\nimport { addProduct } from '../../basket/actions'\n\nconst mapStateToProps = (state, ownProps) => ({\n  myProducts: state.products.products,\n  isUser: ownProps.isUser\n})\n\nconst mapDispatchToProps = dispatch => ({\n  fetchProducts: () => dispatch(fetchProducts()),\n  addProduct: (product) => dispatch(addProduct(product))\n})\n\nclass ProductsList extends Component {\n\n    componentDidMount() {\n      this.props.fetchProducts()\n    }\n\n    render () {\n      return (\n        <React.Fragment>\n          {this.props.myProducts.map((product, index) => (\n            <Product key={`prod-${index}`} data={product} addHandler={this.props.addProduct} />\n          ))}\n        </React.Fragment>\n      )\n    }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProductsList)\n","import { PRODUCTS_FETCH } from './constants'\n\nexport const fetchProducts = () => ({\n  type: PRODUCTS_FETCH\n})\n","import { BASKET_ADD_PRODUCT } from './constants'\n\nexport const addProduct = (product) => ({\n  type: BASKET_ADD_PRODUCT,\n  payload: product\n})\n","import React from 'react'\n\nconst Basket = props => (\n  <div style={{ border: '#c0c0c0 1px solid' }}>\n    {props.data.map((product, index) => (\n      <div key={`basket-${index}`}>\n        <span>{product.name}</span> {product.quantity} szt., {product.quantity * product.price}\n      </div>\n    ))}\n  </div>\n)\n\nexport default Basket\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Basket from '../components/Basket'\n\nconst mapStateToProps = state => ({\n  products: state.basket.products\n})\n\nclass BasketContainer extends React.Component {\n  render () {\n    return (\n      <Basket data={this.props.products} />\n    )\n  }\n}\n\nexport default connect(mapStateToProps)(BasketContainer)\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport ProductsList from './products/containers/ProductsList'\nimport BasketContainer from './basket/containers/BasketContainer'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BasketContainer />\n      <ProductsList isUser={true} />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}